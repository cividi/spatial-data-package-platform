from django.contrib.gis import admin
from django.contrib.admin import SimpleListFilter
from django.contrib.postgres import fields
from django.utils.translation import gettext as _
from django_json_widget.widgets import JSONEditorWidget
from django.utils.html import mark_safe
from django.contrib import messages
from django.forms.widgets import Textarea, TextInput
import requests
from parler.admin import TranslatableAdmin
from parler.forms import TranslatableModelForm
from sortedm2m_filter_horizontal_widget.forms import SortedFilteredSelectMultiple
from gsmap.models import Municipality, Snapshot, Workspace, Category, Usergroup, Attachement, Annotation


class MunicipalityAdmin(admin.OSMGeoAdmin):
    readonly_fields = ('bfs_number',)
    fields = ('bfs_number', 'name', 'canton', 'perimeter')
    list_display = (
        'name',
        'bfs_number',
    )
    list_filter = ('canton',)
    search_fields = ('id', 'name', 'canton')

    def get_map_widget(self, db_field):
        return Textarea



class SnapshotAdmin(admin.OSMGeoAdmin):
    readonly_fields = ('id', 'created', 'modified', 'get_absolute_link',
                       'thumbnail_generated_image', 'screenshot_generated_image',
                       'thumbnail_manual_image', 'screenshot_manual_image')
    fieldsets = (
        (_('Meta'), {
            'fields': ('id', 'get_absolute_link', 'created', 'modified',
                       'is_showcase', 'archived', 'deleted', 'permission')
        }),
        (_('Main'), {
            'fields': ('title', 'topic', 'data_file',),
        }),
        (_('Screenshots autogenerated'), {
            'fields': ('thumbnail_generated', 'thumbnail_generated_image',
                       'screenshot_generated', 'screenshot_generated_image'),
        }),
        (_('Screenshots manual (overwrite)'), {
            'fields': ('thumbnail_manual', 'thumbnail_manual_image',
                       'screenshot_manual', 'screenshot_manual_image'),
        }),
        (_('Relations'), {
            'fields': ('municipality', 'predecessor', 'user'),
        }),
        # (_('geo'), {
        #     'fields':
        #     ('perimeter',),
        # }),
    )

    formfield_overrides = {
        fields.JSONField: {
            'widget': JSONEditorWidget
        },
    }

    list_display = ('id', 'thumbnail_list_image', 'title', 'municipality',
                    'permission', 'is_showcase', 'created', 'modified', 'user', 'data_file')
    list_filter = ('is_showcase', 'permission')
    search_fields = ['title', 'municipality__name', 'municipality__canton']

    def _image_display(self, obj, width=None, link=True):
        if hasattr(obj, 'url'):
            html = '<img src="{url}" width="{width}" height={height} />'.format(
                url=obj.url, width=width, height='auto'
            )
            if link:
                html = '<a href="{url}" target="_blank">{html}</a>'.format(url=obj.url, html=html)
            return mark_safe(html)
        else:
            return '-'

    def screenshot_generated_image(self, obj):
        return self._image_display(obj.screenshot_generated, width=300)

    def thumbnail_generated_image(self, obj):
        return self._image_display(obj.thumbnail_generated, width=200)

    def thumbnail_list_image(self, obj):
        if obj.thumbnail_generated or obj.thumbnail_manual:
            return self._image_display(
                obj.thumbnail_generated or obj.thumbnail_manual,
                width=50, link=False
            )
        else:
            return '-'

    thumbnail_list_image.short_description = 'thumbnail'

    def screenshot_manual_image(self, obj):
        return self._image_display(obj.screenshot_manual, width=300)

    def thumbnail_manual_image(self, obj):
        return self._image_display(obj.thumbnail_manual, width=200)


    def save_model(self, request, obj, form, change):
        try:
            obj.save()
        except (requests.exceptions.ReadTimeout, requests.exceptions.ConnectionError) as e:
            messages.error(
                request,
                f"Couldn't create the screenshots, screenshot server problem. (ReadTimeout, ConnectionError) {repr(e)}"
            )
        except Exception as e:
            messages.error(
                request,
                f"Couldn't create the screenshots, screenshot server problem. (Other Error) {repr(e)}"
            )


class WorkspaceAdmin(TranslatableAdmin):
    readonly_fields = ('id', 'created', 'modified', 'get_absolute_link')
    fieldsets = (
        (_('Meta'), {
            'fields': (
                ('id', 'get_absolute_link', 'created', 'modified'),
            )
        }),
        (_('Main'), {
            'fields': ('group', 'title', 'description', 'snapshots'),
        }),
        (_('Annotations'), {
            'fields': (
                ('mode'),
                ('findme_enabled', 'annotations_open', 'annotations_likes_enabled', 'polygon_open', 'polygon_likes_enabled'),
                ('annotations_contact_name', 'annotations_contact_email'),
                'categories', 'usergroups'
            )
        }),
    )
    list_display = ('title', 'group', 'get_absolute_link', 'mode', 'annotations_contact_name', 'annotations_contact_email', 'findme_enabled', 'annotations_open', 'annotations_likes_enabled', 'polygon_open', 'polygon_likes_enabled', 'created', 'modified')
    list_filter = ['mode']
    search_fields = ['title', 'description']

    def formfield_for_manytomany(self, db_field, request=None, **kwargs):
        if db_field.name == 'snapshots' or db_field.name == 'categories' or db_field.name == 'usergroups':
            kwargs['widget'] = SortedFilteredSelectMultiple()
        return super().formfield_for_manytomany(db_field, request, **kwargs)
    
    def get_queryset(self, request):
        qs = super().get_queryset(request)
        if not request.user.is_superuser:
            return qs.select_related('group').filter(group__in=request.user.groups.all())
        return qs

class AttachementInline(admin.TabularInline):
    model = Attachement

class AnnotationWorkspaceFilter(SimpleListFilter):
    title = _('Workspace')
    parameter_name = 'workspace'

    def lookups(self, request, model_admin):
        return [(x.id, x.title) for x in Workspace.objects.all() if request.user.is_superuser or x.group in request.user.groups.all()]
    
    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(workspace__id=self.value())
        return queryset

class CategoryGroupFilter(SimpleListFilter):
    title = _('Category')
    parameter_name = 'category'

    def lookups(self, request, model_admin):
        return [(x.id, f'{x.group.name}/{x.name}') for x in Category.objects.all() if request.user.is_superuser or x.group in request.user.groups.all()]
    
    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(category__id=self.value())
        return queryset

class UsergroupGroupFilter(SimpleListFilter):
    title = _('Usergroup')
    parameter_name = 'usergroup'

    def lookups(self, request, model_admin):
        return [(x.pk, f'{x.group.name}/{x.name}') for x in Usergroup.objects.all() if request.user.is_superuser or x.group in request.user.groups.all()]
    
    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(usergroup__pk=self.value())
        return queryset

class AnnotationAdmin(admin.ModelAdmin):
    readonly_fields = ('id','created', 'modified')
    fieldsets = (
        (_('Meta'), {
            'fields': (
                'id',
                ('created', 'modified'),
            )
        }),
        (_('Main'), {
            'fields': ('kind', 'data', 'category', 'usergroup', 'rating', 'workspace','deleted', 'public'),
        }),
    )
    list_display = (
        'id',
        'public',
        'title',
        'description',
        'usergroup',
        'category', 
        'created',
        'rating',
        'kind',
        'workspace',
    )
    inlines = [ AttachementInline, ]
    list_filter = (AnnotationWorkspaceFilter, CategoryGroupFilter, 'kind', UsergroupGroupFilter,)
    search_fields = ('id', 'data')

    def get_queryset(self, request): 
        queryset = super().get_queryset(request)
        if not request.user.is_superuser:
            return queryset.select_related('workspace__group').filter(workspace__group__in=request.user.groups.all())
        return queryset

class CategoryAdminForm(TranslatableModelForm):
    class Meta:
        model = Category
        fields = '__all__'
        widgets = {
            'color': TextInput(attrs={'type': 'color'}),
        }

    # def get_prepopulated_fields(self, request, obj=None):
    #     return {
    #         'slug': ('name',)
    #     }

class CategoryAdmin(TranslatableAdmin): # admin.OSMGeoAdmin, 
    form = CategoryAdminForm

    readonly_fields = ('id', 'created', 'modified')
    fieldsets = (
        (_('Meta'), {
            'fields': ('deleted', 'hide_in_list'),
        }),
        (_('Category'), {
            'fields': ('group', 'name', 'icon', 'color'),
        }),
    )

    list_display = (
        'name',
        'group',
        'color',
        'hide_in_list'
    )

    list_filter = (CategoryGroupFilter, 'hide_in_list', 'color')
    search_fields = ('id', 'translations__name')

    def get_queryset(self, request):
        qs = super().get_queryset(request)
        if not request.user.is_superuser:
            return qs.select_related('group').filter(group__in=request.user.groups.all())
        return qs

class UsergroupAdmin(TranslatableAdmin): # admin.OSMGeoAdmin, 
    readonly_fields = ('created', 'modified')
    fieldsets = (
        (_('Meta'), {
            'fields': ('deleted', 'created', 'modified'),
        }),
        (_('Category'), {
            'fields': ('group', 'key', 'name'),
        }),
    )

    list_display = (
        'key',
        'group',
        'name',
    )

    search_fields = ('id', 'name', 'key')

    def get_queryset(self, request):
        qs = super().get_queryset(request)
        if not request.user.is_superuser:
            return qs.select_related('group').filter(group__in=request.user.groups.all())
        return qs

def _has_change_permission(needed, group, user_groups):
    for g in user_groups:
        if g == group:
            for p in g.permissions.all():
                if p.codename == needed:
                    return True
    return False

admin.site.register(Municipality, MunicipalityAdmin)
admin.site.register(Snapshot, SnapshotAdmin)
admin.site.register(Workspace, WorkspaceAdmin)
admin.site.register(Category, CategoryAdmin)
admin.site.register(Usergroup, UsergroupAdmin)
admin.site.register(Annotation, AnnotationAdmin)
