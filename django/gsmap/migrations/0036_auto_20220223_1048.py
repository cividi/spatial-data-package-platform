# Generated by Django 3.1.13 on 2022-02-23 10:48

from django.db import migrations, models
import django.db.models.deletion
from django.utils.text import slugify
import parler.fields
import parler.models
import sortedm2m.fields

def forwards_func(apps, schema_editor):
    Annotation = apps.get_model('gsmap', 'Annotation') 
    Usergroup = apps.get_model('gsmap', 'Usergroup')

    usergroups = list(map(get_usergroup_from_data, Annotation.objects.all()))
    usergroups = [x for i, x in enumerate(usergroups) if usergroups.index(x) == i and x is not None]

    for usergroup in usergroups:
        exists = list(Usergroup.objects.filter(key=create_usergroup_key(usergroup)))
        if len(exists) == 0:
            g = Usergroup(
                key=create_usergroup_key(usergroup)
            )
            g.set_current_language("de")
            g.name = usergroup
            g.save()

    for object in Annotation.objects.all():
        usergroup = get_usergroup_from_data(object)
        if usergroup:
            object.usergroup = Usergroup.objects.filter(key=create_usergroup_key(usergroup)).first()
            object.data["properties"].pop("usergroup")
            object.save()

def backwards_func(apps, schema_editor):
    Annotation = apps.get_model('gsmap', 'Annotation')

    for object in Annotation.objects.all():
        if object.usergroup:
            object.data["properties"]["usergroup"] = object.usergroup.get_translation("de").name
            object.save()   # Note this only calls Model.save()

def get_usergroup_from_data(annotation):
    data = annotation.data
    if "properties" in data.keys() and "usergroup" in data["properties"].keys():
        return data["properties"]["usergroup"]
    return None

def create_usergroup_key(usergroup):
    return slugify(usergroup)[:50]

class Migration(migrations.Migration):

    dependencies = [
        ('gsmap', '0035_auto_20220222_2317'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usergroup',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(default=False)),
                ('key', models.CharField(max_length=50, primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'verbose_name_plural': 'usergroups',
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.AddField(
            model_name='annotation',
            name='usergroup',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='gsmap.usergroup'),
        ),
        migrations.AddField(
            model_name='workspace',
            name='usergroups',
            field=sortedm2m.fields.SortedManyToManyField(help_text=None, to='gsmap.Usergroup'),
        ),
        migrations.CreateModel(
            name='UsergroupTranslation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('name', models.CharField(max_length=255)),
                ('master', parler.fields.TranslationsForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='gsmap.usergroup')),
            ],
            options={
                'verbose_name': 'usergroup Translation',
                'db_table': 'gsmap_usergroup_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
                'unique_together': {('language_code', 'master')},
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),

        # Also migrate data from/to inside data json field
        migrations.RunPython(forwards_func, backwards_func),
    ]
